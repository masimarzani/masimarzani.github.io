import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});

const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

const hankenGrotesk = localFont({
  src: [
    {
      path: "./fonts/HankenGrotesk-Thin.ttf",
      weight: "100",
      style: "normal",
    },
    {
      path: "./fonts/HankenGrotesk-Light.ttf",
      weight: "200",
      style: "normal",
    },
    {
      path: "./fonts/HankenGrotesk-Regular.woff",
      weight: "400",
      style: "normal",
    },
    {
      path: "./fonts/HankenGrotesk-Medium.ttf",
      weight: "600",
      style: "normal",
    },
    {
      path: "./fonts/HankenGrotesk-Bold.ttf",
      weight: "800",
      style: "normal",
    },
  ],
  variable: "--font-hanken-grotesk",
});

const recoleta = localFont({
  src: "./fonts/recoleta-regulardemo.otf",
  variable: "--font-recoleta",
  weight: "400",
});

const satoshi = localFont({
  src: [
    {
      path: "./fonts/Satoshi-Light.otf",
      weight: "300",
      style: "normal",
    },
    {
      path: "./fonts/Satoshi-Regular.otf",
      weight: "400",
      style: "normal",
    },
    {
      path: "./fonts/Satoshi-Medium.otf",
      weight: "500",
      style: "normal",
    },
    {
      path: "./fonts/Satoshi-Bold.otf",
      weight: "700",
      style: "normal",
    },
  ],
  variable: "--font-satoshi",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
  robots: "noindex",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${hankenGrotesk.variable} ${recoleta.variable} ${satoshi.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
